tagNmae   获得元素节点对象的元素名称；      tag name标签名称
nodeName  获得元素节点对象的元素名称；
nodeValue 获得元素节点对象的文本内容，只有文本元素节点有值，切值为文本内容
nodeType  1是元素对象节点 属性名称2   3是文本节点    9是document
getAttribute("key")   	   获取对象属性值
setAttribute("key","val")  设置对象属性值
removeAttribute("key")     删除对象属性值
object.childElementCount   获得子元素的个数 等同于object.children.length



自定义元素属性需要用getAttriBute("") 去获取;兼容性高
//////////////
ie 9以下支持自定义属性，不包括ie9
object.id;
object.className;   兼容性高
object.getAttriBute("class")||object.getAttriBute("className")导致Ie8以下版本不兼容
//////////////
object.item(0)  == object[0]  //true
///////////////////
document.getElementsByTagName("body")[0] == document.body   //true
//////////////
var h=document.getElementsByTagName("html")[0]
var H=document.documentElement;
console.log(h==H)//true
/////////////////
var D=document.getElementsByName("n2"); 通过标签name属性获取Dom元素对象,注意ie10  以下在非
form   name属性返回  undefined
console.log(D[0].innerHTML)    
///////////////////
transition:0.3s;
//////////
D.ownerDocument == document  //true 
Object.previouseSibling    //包含文本节点
Object.previouseElementSibling  //不包含文本节点
Object.nextSibling
Object.nextElementSibling
Object.attributes   //获取元素对象的属性集合
//////////
document.querySelector("h1").style.color="orange"
/////////////////
清除空白文本节点对象
function getElementChild(o){
			var arr=[];
			for(let i=0;i<o.length;i++){
				if(!(o[i].nodeType == 3 && /^\s+$/.test(o[i].nodeValue))){
					arr.push(o[i])			
				}
			}
			return arr
		}
///////////////////////		
function getElementChild(o){
			for(let i=0;i<o.length;i++){
				if(o[i].nodeType == 3 && /^\s+$/.test(o[i].nodeValue)){
					//arr.push(o[i])	
					o[0].parentNode.removeChild(o[i])
				}
			}
		}		
/////////////////////////////////////
//Node  类型ie8以下不支持，可以自定义
if(typeof Node == 'undefined'){
			window.Node={
				ELEMENT_NODE:1,
				ATTRIBUTE_NODE:2,
				TEXT_NODE:3,
				CDATA_SECTION_NODE:4,
				DOCUMENT_FRAGMENT_NODE:12
				
			}
		}
///////////////////////////////

document.body  //直接获取body对象
document.documentElement //直接获取html对象
document.doctype      //直接获取DOCTYPE  文档声明
document.domain      //获取域名
document.URL    //获取url
document.title  //获取title
document.referrer  获取上一个url
document.anchors  获取文档中带name属性的<a>元素
document.links 获取文档中href属性的<a>标签集合
document.applets  获取<applet>元素的集合，已经不用
document.forms   获得form元素的集合
document.images  获取文档中img的元素集合
normalize()合并文本节点
splitText(3)分离文本节点

/////////
document.createTextNode("mr") //创建文本节点
deleteDate(0,1)删除节点数据
insertData(0,"string")插入文本内容
replaceData(0,2,"hellow")
substringData(0,2)//截取内容
document.getElementsByTagName('!') //ie 9以下版本可以这样获取注释节点

/////////
document.compatMode   //返回css1compat 为标准模式   backCompat 混杂模式
scrollIntoView()     滚动浏览器到指定DOM
parent.contains(children)   判断对象是否是另一个节点的后代节点
outerText() 赋值的时候回覆盖到Dom本身
outerHtml()赋值的时候回覆盖到Dom本身   取值的时候回取到dom本身
textContent   低版本fire fox 支持的属性     同innerText



















